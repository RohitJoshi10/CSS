*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.container{
    height: 400px;
    border: 2px solid red;
    display: grid;
    row-gap: 20px;
    column-gap: 5px;
    /* grid-template-columns: 200px 200px 200px; */
    /* justify-content: space-evenly; */
    /* align-content: space-between; */
    /* align-items: center; */
    grid-template-areas: "header header header header"
                         "sidebar main main main"
                         "sidebar main main main"
                         "footer footer footer footer";
}

.box{
    border: 2px solid green;
    padding: 12px;
}

#box-1{
    background-color: rgb(255, 90, 90);
    /* justify-self: start;
    align-self: center; */
    /* grid-column-start: 1;
    grid-column-end: 4; */
    /* grid-column: 1/3; */
    /* grid-row: 1/3; */
    /* grid-area: 2/ 2/ 3/ 4;  */

    grid-area: header;  
}

#box-2{
    background-color: rgb(231, 225, 132);
    grid-area: sidebar;

}

#box-3{
    background-color: rgb(179, 242, 97);
    grid-area: main;
}

#box-4{
    background-color: rgb(196, 255, 241);
    grid-area: footer;
}

















/*
1. An HTML element becomes a grid container when its display property is set to grid or inline-grid.
  All direct children of the grid container automatically become grid items.

2. The vertical lines of grid items are called columns.
   The horizontal lines of grid items are called rows.

3. The spaces between each column/row are called gaps.
   You can adjust the gap size by using one of the following properties: column-gap, row-gap, gap

4. The lines between columns are called column lines. The lines between rows are called row lines.

5. Grid by default Top-Bottom work krta hai. and usme agr columns hume multiple columns add krne hai toh uske liye parent ki properties use krni chaheye.

*/

/*
     GRID CONTAINER PROPERTIES

1. gap:- It give gap b/w rows and columns. It is shorthand property for row and col. We can also use row-gap and col-gap

2. grid-template-columns:- It is used to define the width of the column. It is used to create multiple columns.
   grid-template-columns: 100px 200px 300px; It will make 3 columns with given width.
   grid-template-columns: 1fr 1fr 1fr 1fr; It will create 4 columns with 1fraction width each.
   grid-template-columns: repeat(4, 1fr); 4 baar repeate karna chata hu 1fr.
   grid-template-columns: repeat(auto-fil, 100px); khud se fill krega columns jitna space h uske hisab se but not recommended to use. 
   grid-template-columns: 200px auto; Phela col 200 width ka hoga but baad wala jitni width bachi hogi utna le lega.

3. grid-template-rows:- It is used to define the height of the row.
   grid-template-rows: 200px 80px; First row ko 200 and second row ko 80 height mil gyi.
   grid-auto-rows: 150px; and iss auto ki help se baaki sabhi ko 150 mil gyi height.

4. justify-content:- The justify-content property is used to align the whole grid inside the container. We can align items in rows(x-axis) ki direction mai.
   justify-content: center; Align Items in center.
   justify-content: end; All items go the right side.
   justify-content: start; All items go the left side.
   justify-content: space-around; Jo bhi space hoga wo apke dono col k left and right side k around aa jayega.
   justify-content: space-between; Jitna bhi space hoga wo in dono cols k bich mai ayega sirf khi aur ni na left na right only in b/w
   justify-content: space-evenly; left and right side mai jo space h wo evenly aara hoga

5. align-content:- The align-content property is used to vertically align the whole grid inside the container. Align the items in Y-axis 
   All the property are same as justify-content. By default they have property of stretch

6. align-items:- Isme jo items h unka jo box h ye item apne uss box k center mai aajate h but not in center of a conatainer.
   align-items: center;


*/

/*
  GRID CHILD ITEMS
  The direct child elements of a grid container automatically becomes grid items.
  1. justify-self:- Imaginary box jo ban raha h uske acc set ho jaeyga. By default ye stretch he hota h. and set hoga horizontly

  2. align-self:- Kisi bhi ek particular child ko align krne k kaam aaata h.

  3. grid-column:- shorthand property of start and end. Can be written as grid-column: 1/3;
     grid-column-start: 1;
     grid-column-end: 3; By this start and end property mera box 2columns ki jagha le lega.
     grid-column: 1/span 3; Span mai bich wala space count hota h jabki without span mai jo space hota h boxes k bich mai wo count hota h.
     grid-column: 1/-1; -1 matlb ki jidhr end hoga waha tak.

  4. grid-row:- Same things happens with row as well just like columns. 

  5. grid-area:- Grid area ki help se hum grid row and col dono ko define kr skte h. It is the shorthand property of grid-row and grid-col
     grid-area: row-s/ col-s / row-e/ col-e;
*/

/*
    GRID TEMPLATE AREA
    Named grid items can be referred to by the grid-template-areas property of the grid container.
    The grid-area property can also be used to assign names to grid items.

    .grid-container{
        grid-template-area:
        'header header header header header'
        'menu main main right right'
        'menu footer footer footer footer';
    }

    .items1 { grid-area: header; }
    .items2 { grid-area: menu; }
    .items3 { grid-area: main; }
    .items4 { grid-area: right; }
    .items5 { grid-area: footer; }

*/