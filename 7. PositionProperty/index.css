.container {
    width: 300px;
    height: 600px;
    background-color: gainsboro;
    margin: 100px;
}

.box {
    width: 100px;
    height: 100px;
}

.red {
    position: relative; /* Relative to the parent */
    background-color: red;
    /* Top se 50% niche aa jao. You can also give negative values*/
    top: 100px;
    left: 100px;
    /* bottom: 50px; */
    /* right: 50px; */
    
}

.green {
    background-color: green;
    /* This not work relative to root. rather than it works relative to the parent whoes position is relative*/
    position: absolute; /* relatov to parent but not always*/
    top: 0px;
    left: 0px;


}

.blue {
    background-color: blue; /* It will remain in it's position and it is relative to root*/
    position: fixed;
    bottom: 50px;
    right: 50px;
}

.purple{
    background-color: purple;
    /* Sticky jaha tak parent hai udhr tak sticky rhega and uske baad fir fixed ho jayega*/
    position: sticky; /** Sticky krne k baad we need to tell ki parent k hisab se kitni duri pe stick krna h */
    top: 50px;
}

.fixed{
    height: 300vh;
}


/*

The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).
There are five different position values: static relative fixed absolute sticky Elements are then positioned using the top,
bottom,
left,
and right properties. 
However, these properties will not work unless the position property is set first. 
They also work differently depending on the position value.

1. Static:- An element with position: static;
is not positioned in any special way;
it is always positioned according to the normal flow of the page: 
By default the position is always static.

2. Relative:- An element with position: relative;
is positioned relative to its normal position.
Setting the top,right,bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. 
Other content will not be adjusted to fit into any gap left by the element.

3. Fixed:- An element with position: fixed;
is positioned relative to the viewport,
which means it always stays in the same place even if the page is scrolled. The top,right,bottom, and left properties are used to position the element. 
A fixed element does not leave a gap in the page where it would normally have been located.

4. Absolute:- An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). However;
if an absolute positioned element has no positioned ancestors, it uses the document body,
and moves along with page scrolling. Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.

5. Sticky:- An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). However;
if an absolute positioned element has no positioned ancestors, it uses the document body,
and moves along with page scrolling. Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.

NOTE:- Z-INDEX PROPERTY
The z-index property specifies the stack order of an element.
When elements are positioned,
they can overlap other elements. The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).
An element can have a positive or negative stack order:

If two positioned elements overlap each other without a z-index specified,
the element defined last in the HTML code will be shown on top.

*/